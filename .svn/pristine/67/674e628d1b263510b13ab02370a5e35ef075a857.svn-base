package kr.or.ddit.cstmr.rsvt.controller;

import java.security.Principal;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpRequest;
import org.springframework.http.MediaType;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.cstmr.rsvt.service.CstmrRsvtService;
import kr.or.ddit.global.security.MberUser;
import kr.or.ddit.global.security.MberVOWrapper;
import kr.or.ddit.global.vo.AttatchRmTypeVO;
import kr.or.ddit.global.vo.CstmrVO;
import kr.or.ddit.global.vo.MberVO;
import kr.or.ddit.global.vo.RecomRoomVO;
import kr.or.ddit.global.vo.RoomTypeVO;
import kr.or.ddit.global.vo.RsvtDetailsVO;
import kr.or.ddit.global.vo.RsvtParamsVO;
import kr.or.ddit.global.vo.RsvtVO;
import kr.or.ddit.global.vo.SetleVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("cstmr/rsvt")
public class CstmrRsvtRmtRetrieveController {

	@Inject
	private CstmrRsvtService service;
	

	@PostMapping("rsvtStep01")
	public String rsvtStep01(
			@ModelAttribute RsvtParamsVO rsvtParams
			, HttpServletRequest request)
			throws ParseException {
		
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		Date checkin = dateFormat.parse(rsvtParams.getRsvtCheckinYmd());
		Date checkout = dateFormat.parse(rsvtParams.getRsvtCheckoutYmd());

		int nbrCnt = rsvtParams.getAdultCnt() + rsvtParams.getChildCnt();
		long rsvtDays = checkout.getTime() - checkin.getTime();
		long rsvtDay = rsvtDays / (24 * 60 * 60 * 1000);

		// 고객이 입력한 예약정보 맵에 저장
		Map<String, Object> rsvtRmtMap = new HashMap<>();
		rsvtRmtMap.put("rsvtCheckinYmd", rsvtParams.getRsvtCheckinYmd());
		rsvtRmtMap.put("rsvtCheckoutYmd", rsvtParams.getRsvtCheckoutYmd());
		rsvtRmtMap.put("childCnt", rsvtParams.getChildCnt());
		rsvtRmtMap.put("adultCnt", rsvtParams.getAdultCnt());
		rsvtRmtMap.put("nbrCnt", nbrCnt);
		rsvtRmtMap.put("rsvtRoomCnt", rsvtParams.getRsvtRoomCnt());
		rsvtRmtMap.put("rsvtDay", rsvtDay);

		HttpSession session = request.getSession();
		
		// 새로운 세션으로 접근 시
		if (session.isNew()) {
			// 에러 처리
		}
		
		session.setAttribute("rsvtRmtMap", rsvtRmtMap);

		// 받은 파라미터 값으로 예약가능객실 조회 후 리스트에 저장
		List<RoomTypeVO> rsvtRmtList = service.retrieveRsvtRmt(rsvtRmtMap);
		
		// 파라미터가 비어있지 않을 떄
		if (!rsvtRmtList.isEmpty()) {
			Iterator<RoomTypeVO> value = rsvtRmtList.iterator();

			List<AttatchRmTypeVO> rmtListType = new ArrayList<>();

			while (value.hasNext()) {
				// 다음 요소의 RmtTypeCd를 저장
				String rmtTypeCd = value.next().getRmtTypeCd();

				// 조회한 RmtTypeCd로 객실타입 조회 후 저장
				AttatchRmTypeVO rmtList = service.retrieveRmt(rmtTypeCd);

				rmtListType.add(rmtList);
			}
			session.setAttribute("rmtListType", rmtListType);

			// 파라미터가 비어있을 시
		} else {

			// 예약객실 없음 메세지 추가
		}

		return "redirect:rsvtStep01";
	}
	
	@GetMapping("rsvtStep01")
	public String rsvtStep01() {
		return "cstmr/rsvt/rsvtStep01";
	}

	@GetMapping("recomRsvtList")
	public String rcrmtList() {
		return "error/403";
	}

	@GetMapping("rsvtStep02")
	public String rsvtStep02() {
		return "cstmr/rsvt/rsvtStep02";
	}

	@PostMapping("rsvtStep02")
	public String rsvtStep02(
			@ModelAttribute RsvtParamsVO rsvtParams
			, HttpServletRequest request
			, @RequestParam("rmtTypeCd") String rmtTypeCd
		) {
		HttpSession session = request.getSession();
		
		// 고객인 선택한 객실 타입
		AttatchRmTypeVO roomType = service.retrieveRmt(rmtTypeCd);
		
		session.setAttribute("roomType", roomType);

		return "redirect:rsvtStep02";
	}
	
	@PostMapping("rsvtStep03")
	public String rsvtStep03(
			Authentication authentication
			, @ModelAttribute("totalAmnt") int totalAmnt
			, HttpServletRequest request
			) {
		HttpSession session = request.getSession();
		// 총가격
		session.setAttribute("totalAmnt", totalAmnt);
		
	    if (authentication != null && authentication.getPrincipal() instanceof MberVOWrapper) {
	        MberVO mber = ((MberVOWrapper) authentication.getPrincipal()).getMberUser();

	        if (mber != null) {
	            String cstNo = mber.getCstNo();
	            MberVO realMber = service.retrieveMber(cstNo);
	            session.setAttribute("realMber", realMber);
	            
	        }
	    }
	    log.info("비회원입니다 ."); 

	    return "redirect:rsvtStep03";
	}

	@GetMapping("rsvtStep03")
	public String rsvtStep03() {
		return "cstmr/rsvt/rsvtStep03";
	}


	@PostMapping("rsvtStep04")
	public String rsvtSetle(
			@ModelAttribute CstmrVO rsvtCstmr
			, @ModelAttribute SetleVO setle
			, HttpServletRequest request
		) {
		HttpSession session = request.getSession();
		
		Map<String, Object> rsvtData = new HashMap<>();
		RsvtDetailsVO rsvtDetail = new RsvtDetailsVO();

		// 선택 객실 타입정보
		AttatchRmTypeVO roomType = (AttatchRmTypeVO) session.getAttribute("roomType");
		
		// 예약정보
		Map<String, Object> rsvtRmtMap = (Map<String, Object>) session.getAttribute("rsvtRmtMap");
		
		// 필요한 정보만 맵에 저장
		RsvtVO rsvtMap = new RsvtVO();
		LocalDate rsvtCheckinYmd = LocalDate.parse(rsvtRmtMap.get("rsvtCheckinYmd").toString());
		LocalDate rsvtCheckoutYmd = LocalDate.parse(rsvtRmtMap.get("rsvtCheckoutYmd").toString());
		rsvtMap.setRsvtCheckinYmd(rsvtCheckinYmd);
		rsvtMap.setRsvtCheckoutYmd(rsvtCheckoutYmd);
		rsvtMap.setRsvtRoomCnt((Integer) rsvtRmtMap.get("rsvtRoomCnt"));
		rsvtMap.setRsvtAdultCnt((Integer) rsvtRmtMap.get("adultCnt"));
		rsvtMap.setRsvtChildCnt((Integer) rsvtRmtMap.get("childCnt"));
		rsvtMap.setRsvtAmnt((Integer) session.getAttribute("totalAmnt"));
		
		
		rsvtData.put("rsvtMap", rsvtMap);
		rsvtData.put("rsvtCstmr", rsvtCstmr);
		rsvtData.put("setle", setle);
		rsvtData.put("roomType",roomType);
		
		service.createNewRsvt(rsvtData);
		

		return "redirect:rsvtEnd";
	}

	@GetMapping("rsvtEnd")
	public String rsvtEnd() {
		return "cstmr/rsvt/rsvtEnd";
	}

	@PostMapping("recomRsvtList")
	public String rcRmList(String adult, String child, Model model) {
		int totalNmpr = Integer.parseInt(adult) + Integer.parseInt(child);
		String cstNo = "M2400019"; // 추후 가져와야됨.
		CstmrVO cstmr = service.retrieveCstmrAge(cstNo);
		String age = cstmr.getAge();

		Map<String, Object> customerData = new HashMap<>();
		customerData.put("age", age);
		customerData.put("totalNmpr", totalNmpr);

		List<RecomRoomVO> rcRm = service.retrieveRcRm(customerData);
		model.addAttribute("rcRm", rcRm);
		log.info("######################rcRm:{}", rcRm);

		String rmType1 = rcRm.get(0).getRermRmtype();
		String rmType2 = rcRm.get(1).getRermRmtype();

		log.info("##########################rmType1:{}", rmType1);

		AttatchRmTypeVO attRmt1 = service.retrieveRmt(rmType1);
		AttatchRmTypeVO attRmt2 = service.retrieveRmt(rmType2);

		log.info("##########################attRmt1:{}", attRmt1);

		Map<String, AttatchRmTypeVO> attRmtMap = new HashMap<>();
		attRmtMap.put("attRmt1", attRmt1);
		attRmtMap.put("attRmt2", attRmt2);

		log.info("attRmtMap:{}", attRmtMap);

		model.addAttribute("attRmtMap", attRmtMap);

		return "cstmr/rsvt/recomRsvtList";
	}

}
